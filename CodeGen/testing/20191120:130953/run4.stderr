assembly_gen.c: In function ‘void assembly_code_generator(LLVMValueRef, std::map<LLVMOpaqueValue*, int>&, std::map<LLVMOpaqueValue*, int>&, std::map<LLVMOpaqueBasicBlock*, char*>&, int)’:
assembly_gen.c:288:18: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  288 |      operation = "cmp";
      |                  ^~~~~
assembly_gen.c:291:18: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  291 |      operation = "addl";
      |                  ^~~~~~
assembly_gen.c:294:18: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  294 |      operation = "subl";
      |                  ^~~~~~
assembly_gen.c:297:18: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
  297 |      operation = "imull";
      |                  ^~~~~~~
  %4 = load i32, i32* %2, align 4  %5 = load i32, i32* %3, align 4  %6 = load i32, i32* %2, align 4  %7 = call i32 (...) @read()  %8 = load i32, i32* %3, align 4  %9 = sub nsw i32 %8, 10  %10 = load i32, i32* %2, align 4  %11 = load i32, i32* %3, align 4  %12 = mul nsw i32 %10, %11  %13 = load i32, i32* %3, align 4  %14 = add nsw i32 %13, 3  %15 = load i32, i32* %2, align 4  %16 = mul nsw i32 %15, -2  %17 = load i32, i32* %3, align 4  %18 = add nsw i32 %17, 3  %19 = load i32, i32* %2, align 4  %20 = mul nsw i32 %19, -2  %21 = icmp sge i32 %18, %20  %4 = load i32, i32* %2, align 4  %5 = load i32, i32* %3, align 4  %6 = load i32, i32* %2, align 4  %7 = call i32 (...) @read()  %8 = load i32, i32* %3, align 4  %9 = sub nsw i32 %8, 10  %10 = load i32, i32* %2, align 4  %11 = load i32, i32* %3, align 4  %12 = mul nsw i32 %10, %11  %13 = load i32, i32* %3, align 4  %14 = add nsw i32 %13, 3  %15 = load i32, i32* %2, align 4  %16 = mul nsw i32 %15, -2  %17 = load i32, i32* %3, align 4  %18 = add nsw i32 %17, 3  %19 = load i32, i32* %2, align 4  %20 = mul nsw i32 %19, -2  %21 = icmp sge i32 %18, %20
Instruction examined:   %2 = alloca i32, align 4

Instruction examined:   %3 = alloca i32, align 4

Instruction examined:   store i32 %0, i32* %2, align 4
A store instruction: storing argument!

Instruction examined:   %4 = load i32, i32* %2, align 4
offset of instruction: 8

Instruction examined:   store i32 %4, i32* %3, align 4
A store instruction: updating local mem: 0 moving to location: -4

Instruction examined:   store i32 3, i32* %2, align 4
A store instruction: 
Instruction examined:   %5 = load i32, i32* %3, align 4
offset of instruction: -4

Instruction examined:   call void @print(i32 %5)

Instruction examined:   %6 = load i32, i32* %2, align 4
offset of instruction: 8

Instruction examined:   call void @print(i32 %6)

Instruction examined:   %7 = call i32 (...) @read()

Instruction examined:   store i32 %7, i32* %3, align 4
A store instruction:  moving to location: -4

Instruction examined:   %8 = load i32, i32* %3, align 4
offset of instruction: -4

Instruction examined:   %9 = sub nsw i32 %8, 10

Instruction examined:   call void @print(i32 %9)

Instruction examined:   store i32 10, i32* %2, align 4
A store instruction: 
Instruction examined:   %10 = load i32, i32* %2, align 4
offset of instruction: 8

Instruction examined:   %11 = load i32, i32* %3, align 4
offset of instruction: -4

Instruction examined:   %12 = mul nsw i32 %10, %11

Instruction examined:   call void @print(i32 %12)

Instruction examined:   %13 = load i32, i32* %3, align 4
offset of instruction: -4

Instruction examined:   %14 = add nsw i32 %13, 3

Instruction examined:   call void @print(i32 %14)

Instruction examined:   %15 = load i32, i32* %2, align 4
offset of instruction: 8

Instruction examined:   %16 = mul nsw i32 %15, -2

Instruction examined:   call void @print(i32 %16)

Instruction examined:   %17 = load i32, i32* %3, align 4
offset of instruction: -4

Instruction examined:   %18 = add nsw i32 %17, 3

Instruction examined:   %19 = load i32, i32* %2, align 4
offset of instruction: 8

Instruction examined:   %20 = mul nsw i32 %19, -2

Instruction examined:   %21 = icmp sge i32 %18, %20

Instruction examined:   br i1 %21, label %22, label %23
i32 %0  %2 = alloca i32, align 4  %3 = alloca i32, align 4  %4 = load i32, i32* %2, align 4  %5 = load i32, i32* %3, align 4  %6 = load i32, i32* %2, align 4  %7 = call i32 (...) @read()  %8 = load i32, i32* %3, align 4  %9 = sub nsw i32 %8, 10  %10 = load i32, i32* %2, align 4  %11 = load i32, i32* %3, align 4  %12 = mul nsw i32 %10, %11  %13 = load i32, i32* %3, align 4  %14 = add nsw i32 %13, 3  %15 = load i32, i32* %2, align 4  %16 = mul nsw i32 %15, -2  %17 = load i32, i32* %3, align 4  %18 = add nsw i32 %17, 3  %19 = load i32, i32* %2, align 4  %20 = mul nsw i32 %19, -2  %21 = icmp sge i32 %18, %20
Instruction examined:   call void @print(i32 11111)

Instruction examined:   br label %23
i32 %0  %2 = alloca i32, align 4  %3 = alloca i32, align 4  %4 = load i32, i32* %2, align 4  %5 = load i32, i32* %3, align 4  %6 = load i32, i32* %2, align 4  %7 = call i32 (...) @read()  %8 = load i32, i32* %3, align 4  %9 = sub nsw i32 %8, 10  %10 = load i32, i32* %2, align 4  %11 = load i32, i32* %3, align 4  %12 = mul nsw i32 %10, %11  %13 = load i32, i32* %3, align 4  %14 = add nsw i32 %13, 3  %15 = load i32, i32* %2, align 4  %16 = mul nsw i32 %15, -2  %17 = load i32, i32* %3, align 4  %18 = add nsw i32 %17, 3  %19 = load i32, i32* %2, align 4  %20 = mul nsw i32 %19, -2  %21 = icmp sge i32 %18, %20
Instruction examined:   ret i32 11
i32 %0  %2 = alloca i32, align 4  %3 = alloca i32, align 4  %4 = load i32, i32* %2, align 4  %5 = load i32, i32* %3, align 4  %6 = load i32, i32* %2, align 4  %7 = call i32 (...) @read()  %8 = load i32, i32* %3, align 4  %9 = sub nsw i32 %8, 10  %10 = load i32, i32* %2, align 4  %11 = load i32, i32* %3, align 4  %12 = mul nsw i32 %10, %11  %13 = load i32, i32* %3, align 4  %14 = add nsw i32 %13, 3  %15 = load i32, i32* %2, align 4  %16 = mul nsw i32 %15, -2  %17 = load i32, i32* %3, align 4  %18 = add nsw i32 %17, 3  %19 = load i32, i32* %2, align 4  %20 = mul nsw i32 %19, -2  %21 = icmp sge i32 %18, %20
Parameter:   %5 = load i32, i32* %3, align 4

Parameter:   %6 = load i32, i32* %2, align 4

Parameter:   %9 = sub nsw i32 %8, 10

Parameter:   %12 = mul nsw i32 %10, %11

Parameter:   %14 = add nsw i32 %13, 3

Parameter:   %16 = mul nsw i32 %15, -2

Conditional branch:   br i1 %21, label %22, label %23
Basic blocks: 
; <label>:23:                                     ; preds = %22, %1
  ret i32 11


; <label>:22:                                     ; preds = %1
  call void @print(i32 11111)
  br label %23

Labels: .B1 .B2

Parameter: i32 11111
